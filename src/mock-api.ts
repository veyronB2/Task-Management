/**
 * @file Mock API Service
 * @description This file simulates a REST API for a task management application.
 * It uses localStorage for data persistence across page reloads, making the
 * development experience closer to a real application.
 *
 * All functions are asynchronous and return Promises to mimic real network requests.
 * A random delay is introduced to simulate network latency.
 */

// --- TYPE DEFINITIONS ---

/**
 * Represents a single task object.
 */
export interface Task {
  id: string;
  title: string;
  description?: string;
  isCompleted: boolean;
  dueDate?: Date; // ISO 8601 Date String
}

/**
 * The data shape for creating a new task.
 * 'id' and 'isCompleted' are generated by the server/service.
 */
export type CreateTaskData = Omit<Task, 'id' | 'isCompleted'>;

/**
 * The data shape for updating an existing task.
 * All fields are optional.
 */
export type UpdateTaskData = Partial<Omit<Task, 'id'>>;


// --- MOCK DATABASE & HELPERS ---

// The key for storing our tasks data in localStorage.
const LOCAL_STORAGE_KEY = 'tasks_db';

// In-memory cache of the tasks. Initialized from localStorage.
let tasks: Task[] = loadTasksFromLocalStorage();

/**
 * Loads tasks from localStorage. If no tasks are found, it initializes
 * with some default seed data.
 */
function loadTasksFromLocalStorage(): Task[] {
  try {
    const data = localStorage.getItem(LOCAL_STORAGE_KEY);
    if (data) {
      return JSON.parse(data);
    }
  } catch (error) {
    console.error("Failed to parse tasks from localStorage", error);
  }

  // If localStorage is empty or corrupted, seed with initial data.
  const seedData: Task[] = [
    {
      id: 'task-1',
      title: 'Setup project repository',
      description: 'Initialize the project with a README and basic structure.',
      isCompleted: true,
      dueDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
    },
    {
      id: 'task-2',
      title: 'Build UI components',
      description: 'Create reusable components for buttons, inputs, and cards.',
      isCompleted: false,
      dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days from now
    },
    {
      id: 'task-3',
      title: 'Implement state management',
      description: 'Choose and set up a state management library (e.g., Redux, Zustand).',
      isCompleted: false,
    },
  ];
  saveTasksToLocalStorage(seedData);
  return seedData;
}

/**
 * Saves the current state of the tasks array to localStorage.
 * @param {Task[]} currentTasks - The array of tasks to save.
 */
function saveTasksToLocalStorage(currentTasks: Task[]): void {
  try {
    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(currentTasks));
  } catch (error) {
    console.error("Failed to save tasks to localStorage", error);
  }
}

/**
 * Simulates network latency by waiting for a random duration.
 * @param {number} min - Minimum delay in milliseconds.
 * @param {number} max - Maximum delay in milliseconds.
 */
const simulateNetworkDelay = (min = 300, max = 800) => {
  const delay = Math.random() * (max - min) + min;
  return new Promise(resolve => setTimeout(resolve, delay));
};


// --- PUBLIC API FUNCTIONS ---

/**
 * Retrieves all tasks.
 * @returns {Promise<Task[]>} A promise that resolves with the array of all tasks.
 */
export const getTasks = async (): Promise<Task[]> => {
  await simulateNetworkDelay();
  console.log('API: Fetched all tasks', tasks);
  // Return a copy to prevent direct mutation of the in-memory store.
  return [...tasks];
};

/**
 * Retrieves a single task by its ID.
 * @param {string} id - The ID of the task to retrieve.
 * @returns {Promise<Task>} A promise that resolves with the found task.
 * @rejects {Error} If no task with the given ID is found.
 */
export const getTaskById = async (id: string): Promise<Task> => {
  await simulateNetworkDelay();
  const task = tasks.find(t => t.id === id);
  if (task) {
    console.log(`API: Fetched task by ID ${id}`, task);
    return { ...task }; // Return a copy
  } else {
    console.error(`API Error: Task with ID ${id} not found.`);
    throw new Error('Task not found');
  }
};

/**
 * Creates a new task.
 * @param {CreateTaskData} data - The data for the new task.
 * @returns {Promise<Task>} A promise that resolves with the newly created task.
 */
export const createTask = async (data: CreateTaskData): Promise<Task> => {
  await simulateNetworkDelay();
  if (!data.title) {
    throw new Error("Title is a required field.");
  }
  const newTask: Task = {
    ...data,
    id: `task-${Date.now()}-${Math.random().toString(16).slice(2)}`,
    isCompleted: false,
  };
  tasks.push(newTask);
  saveTasksToLocalStorage(tasks);
  console.log('API: Created new task', newTask);
  return { ...newTask };
};

/**
 * Updates an existing task.
 * @param {string} id - The ID of the task to update.
 * @param {UpdateTaskData} updates - An object with the fields to update.
 * @returns {Promise<Task>} A promise that resolves with the updated task.
 * @rejects {Error} If no task with the given ID is found.
 */
export const updateTask = async (id: string, updates: UpdateTaskData): Promise<Task> => {
  await simulateNetworkDelay();
  const taskIndex = tasks.findIndex(t => t.id === id);

  if (taskIndex === -1) {
    console.error(`API Error: Cannot update. Task with ID ${id} not found.`);
    throw new Error('Task not found');
  }

  const originalTask = tasks[taskIndex];
  const updatedTask = { ...originalTask, ...updates };
  tasks[taskIndex] = updatedTask;

  saveTasksToLocalStorage(tasks);
  console.log(`API: Updated task with ID ${id}`, updatedTask);
  return { ...updatedTask };
};

/**
 * Deletes a task by its ID.
 * @param {string} id - The ID of the task to delete.
 * @returns {Promise<void>} A promise that resolves when the deletion is complete.
 * @rejects {Error} If no task with the given ID is found.
 */
export const deleteTask = async (id: string): Promise<void> => {
  await simulateNetworkDelay();
  const taskIndex = tasks.findIndex(t => t.id === id);

  if (taskIndex === -1) {
    console.error(`API Error: Cannot delete. Task with ID ${id} not found.`);
    throw new Error('Task not found');
  }

  tasks.splice(taskIndex, 1);
  saveTasksToLocalStorage(tasks);
  console.log(`API: Deleted task with ID ${id}`);
  return;
};

/**
 * Reseeds the tasks database with the original seed data.
 * Clears localStorage and reloads the default tasks.
 */
export const reseedTasks = async (): Promise<Task[]> => {
  await simulateNetworkDelay();
  localStorage.removeItem(LOCAL_STORAGE_KEY);
  tasks = loadTasksFromLocalStorage();
  console.log('API: Reseeded tasks', tasks);
  return [...tasks];
};